{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Tag","_ref","tag","removeTag","react_default","a","createElement","className","text","onClick","id","AddTagForm","_ref2","addTag","_useState","useState","_useState2","Object","slicedToArray","value","setValue","onSubmit","e","preventDefault","onKeyDown","keyCode","slice","type","onChange","target","App","_useState3","_useState4","userTags","setUserTag","newTags","toConsumableArray","filter","lastValue","splice","map","console","log","key","newId","Math","max","apply","u","concat","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0MAGA,SAASA,EAATC,GAA+B,IAAjBC,EAAiBD,EAAjBC,IAAKC,EAAYF,EAAZE,UACjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,YAAOJ,EAAIM,MACXJ,EAAAC,EAAAC,cAAA,UAAQG,QAAS,kBAAMN,EAAUD,EAAIQ,MAArC,MAKN,SAASC,EAATC,GAAyC,IAApBC,EAAoBD,EAApBC,OAAQV,EAAYS,EAAZT,UAAYW,EACbC,mBAAS,IADIC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAChCK,EADgCH,EAAA,GACzBI,EADyBJ,EAAA,GAwBvC,OACEZ,EAAAC,EAAAC,cAAA,QAAMe,SATa,SAAAC,GACnBA,EAAEC,iBACEJ,IACFN,EAAOM,GACPC,EAAS,MAKmBI,UAtBV,SAAAF,GACpB,IAAKH,GAAuB,IAAdG,EAAEG,QAAe,CAC7B,IACMN,EADYhB,IACM,GAAGK,KAC3BY,EAASD,EAAQA,EAAMO,OAAO,IAG5BP,GAAuB,IAAdG,EAAEG,UACbZ,EAAOM,GACPC,EAAS,OAcThB,EAAAC,EAAAC,cAAA,SACEqB,KAAK,OACLpB,UAAU,QACVY,MAAOA,EACPS,SAAU,SAAAN,GAAC,OAAIF,EAASE,EAAEO,OAAOV,WAmD1BW,MA7Cf,WAAc,IAAAC,EACmBhB,mBAAS,CACtC,CAACL,GAAI,EAAGF,KAAM,UACd,CAACE,GAAI,EAAGF,KAAM,SACd,CAACE,GAAI,EAAGF,KAAM,cAJJwB,EAAAf,OAAAC,EAAA,EAAAD,CAAAc,EAAA,GACLE,EADKD,EAAA,GACKE,EADLF,EAAA,GAYN7B,EAAY,SAAAO,GAChB,IAAMyB,EAAOlB,OAAAmB,EAAA,EAAAnB,CAAOgB,GAChBvB,GACFwB,EAAWC,EAAQE,OAAO,SAAAnC,GAAG,OAAIA,EAAIQ,KAAOA,KAE5C,IAAM4B,EAAYH,EAAQI,QAAQ,GAElC,OADAL,EAAWC,GACJG,GAKX,OACElC,EAAAC,EAAAC,cAAA,OACEC,UAAU,OAEVH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZ0B,EAASO,IAAI,SAAAtC,GAEZ,OADAuC,QAAQC,IAAIxC,GAEVE,EAAAC,EAAAC,cAACN,EAAD,CACE2C,IAAKzC,EAAIQ,GACTR,IAAKA,EACLC,UAAWA,MAIjBC,EAAAC,EAAAC,cAACK,EAAD,CAAYE,OAhCH,SAAAL,GACb,IAAMoC,EAAQC,KAAKC,IAALC,MAAAF,KAAI5B,OAAAmB,EAAA,EAAAnB,CAAQgB,EAASO,IAAI,SAAAQ,GAAC,OAAIA,EAAEtC,OAAO,EACrDwB,EAAWjB,OAAAmB,EAAA,EAAAnB,CAAIgB,GAALgB,OAAA,CAAe,CAAEvC,GAAIkC,EAAOpC,YA8BNL,UAAWA,OC3E3B+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5a009ae1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport \"./App.css\";\n\nfunction Tag({tag, removeTag}) {\n  return(\n    <div className=\"tag\">\n      <span>{tag.text}</span>\n      <button onClick={() => removeTag(tag.id)}>x</button>\n    </div>\n  );\n}\n\nfunction AddTagForm({addTag, removeTag}) {\n  const [value, setValue] = useState(\"\");\n\n  const handleKeyDown = e => {\n    if (!value && e.keyCode === 8) {\n      const lastValue = removeTag();\n      const value = lastValue[0].text;\n      setValue(value + value.slice(-1));\n    }\n\n    if (value && e.keyCode === 9) {\n      addTag(value);\n      setValue(\"\");\n    }\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (value) {\n      addTag(value);\n      setValue(\"\");\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit} onKeyDown={handleKeyDown}>\n      <input \n        type='text'\n        className='input'\n        value={value}\n        onChange={e => setValue(e.target.value)}\n      />\n    </form>\n  );\n}\n\nfunction App(){\n  const [userTags, setUserTag] = useState([\n    {id: 1, text: \"Brazil\"},\n    {id: 2, text: \"India\"},\n    {id: 3, text: \"Thailand\"}\n  ]);\n\n  const addTag = text => {\n    const newId = Math.max(...userTags.map(u => u.id)) + 1;\n    setUserTag([...userTags, { id: newId, text }]);\n  }\n\n  const removeTag = id => {\n    const newTags = [...userTags];\n    if (id) {\n      setUserTag(newTags.filter(tag => tag.id !== id));\n    } {\n      const lastValue = newTags.splice(-1);\n      setUserTag(newTags);\n      return lastValue;\n    }\n  }\n\n\n  return (\n    <div\n      className=\"app\"\n    >\n      <div className='wrapper'>\n        {userTags.map(tag => {\n          console.log(tag)\n          return (\n            <Tag \n              key={tag.id}\n              tag={tag}\n              removeTag={removeTag}\n            />\n          )\n        })}\n        <AddTagForm addTag={addTag} removeTag={removeTag} />\n      </div>      \n    </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}